1. #create database
	CREATE DATABASE project_dqlab_sales_store;
2. #create table
	CREATE TABLE dqlab_sales_store(
		number INT,
		order_id INT,
		status VARCHAR(20),
		customer VARCHAR(25),
		order_date DATE,
		qty INT,
		sales INT,
		discount DEC(4,2),
		discount_value INT,
		product_category VARCHAR(25),
		product_sub_category VARCHAR(25));
3. #load data infile into table
	LOAD DATA INFILE 'C:\\xampp\\mysql\\file_project\\dqlab_project.txt'
		INTO TABLE dqlab_sales_store
		FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
		LINES TERMINATED BY '\r\n'
		IGNORE 1 LINES;
4. #drop column number
	ALTER TABLE dqlab_sales_store DROP COLUMN number;
5. #inspection the table 
	SELECT * FROM dqlab_sales_store limit 5;
6. #Overall Performance by year
	SELECT
		YEAR(order_date) as years,
		SUM(sales) as sales,
		COUN(qty) as number_of_order
	FROM dqlab_sales_store
	WHERE status = 'Order Finished'
	GROUP BY years;
7. #calculate growth by product
	SELECT
		YEAR(order_date) as years,
		sub_category,
		SUM(sales) as sales
	FROM dqlab_sales_store
	WHERE status = 'Order Finished' AND YEAR(order_date) IN ('2011','2012')
	GROUP BY 1,2
	ORDER BY 1,3 DESC;
8. #calculate burn rate percentage by years
	SELECT
		YEAR(order_date) as years,
		SUM(sales) as sales,
		SUM(value) as promotion_value,
		ROUND(SUM(value)/SUM(sales)*100,2) as burn_rate_percentage
	FROM dqlab_sales_store
	WHERE status = 'Order Finished'
	GROUP BY years
	ORDER BY years;
9. #calculate burn by products
	SELECT 
		sub_category,
		product_category,
		sales,
		promotion_value,
		ROUND((promotion_value/sales)*100,2) as burn_rate_percentage
	FROM
		(SELECT product_category,
			sub_category,
			SUM(value) as promotion_value,
			SUM(sales) as sales,
			YEAR(order_date) as years,
		FROM dqlab_sales_store
		WHERE status = 'Order Finished' AND YEAR(order_date) = '2012'
		GROUP BY 1,2) a
	ORDER BY 3 DESC;
10. #analysis number_of_customer by years 
	SELECT
		YEAR(order_date) as years,
		COUNT(DISTINCT customer) as number_of_customer
	FROM dqlab_sales_store
	WHERE status = 'Order Finished'
	GROUP BY 1
	ORDER BY 1;
11. #new_customer by year
	SELECT
		YEAR(first_trx) as years,
		COUNT(customer) as number_of_new_customer
	FROM
		(SELECT DISTINCT(customer) as customer,
			MIN(order_date) as first_trx
		FROM dqlab_sales_store
		WHERE status = 'Order Finished'
		GROUP BY 1) x
	GROUP BY 1
	ORDER BY 1;
12. #Customer retention (2009)
	WITH trx_2009 AS (
 		SELECT * FROM dqlab_sales_store
 		WHERE YEAR(order_date) = '2009' AND order_status = 'Order Finished')
,
cohort_items AS (
 SELECT
  	DISTINCT customer,
  	MONTH(MIN(order_date)) AS cohort_month
 FROM
  	trx_2009
 GROUP BY 1
 ORDER BY 1,2)
,
user_activities AS (
 SELECT
  	T.customer,
  (MONTH(order_date) - cohort_month) AS month_number
 FROM trx_2009 T
 LEFT JOIN cohort_items C ON T.customer = C.customer
 GROUP BY 1,2)
,
cohort_size AS (
 SELECT
  	cohort_month,
  	count(1) AS num_users
 FROM cohort_items
 GROUP BY 1
 ORDER BY 1)
,
retention_table AS (
 SELECT
  	C.cohort_month,
  	A.month_number,
  	COUNT(1) AS num_users
 FROM user_activities A
 LEFT JOIN cohort_items C ON A.customer = C.customer
 GROUP BY 1,2)

SELECT
 	B.cohort_month,
 	S.num_users AS total_users,
 	B.month_number,
 	ROUND(ROUND(B.num_users,2) * 100 / ROUND(S.num_users,2),2) AS percentage
FROM retention_table B
LEFT JOIN cohort_size S ON B.cohort_month = S.cohort_month
WHERE B.cohort_month IS NOT NULL
ORDER BY 1,3;